package com.chainsys.reflection;
import java.lang.reflect.*;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Modifier;
import java.util.Scanner;
public class ListClassMembers {
	public static void main(String args[]) {
  
    
       String classname="com.chainsys.reflection.Actor";
       Class<?> actorclass = null;
       try {
          actorclass=Class.forName(classname); // Actor actorclass=null;
       } catch (ClassNotFoundException e1) 
       {
          e1.printStackTrace();
       } 
       Object obj = null;
       try {
          //obj=actorclass.newInstance(); // new Actor();
              obj = actorclass.getDeclaredConstructors()[0].newInstance();
          } catch (IllegalArgumentException e) {
              e.printStackTrace();
          } 
       catch (InvocationTargetException e) {
              e.printStackTrace();
          } catch (SecurityException e) {
              e.printStackTrace();
          }catch (InstantiationException e) {
              e.printStackTrace();
          } catch (IllegalAccessException e) {
              e.printStackTrace();
          }
       //printClassInfo(obj);
       lateBinding();
       //testA();
      // testB();
       
  }
  public static void printClassInfo(Object ob)
    {
       Class<?> classreflected= ob.getClass();
       System.out.println(classreflected.getName());
       System.out.println("Constructors:");
       Constructor<?> constructorlist[] = classreflected.getConstructors();
       for(int i = 0; i < constructorlist.length; i++)
       {
         System.out.println("\t" + constructorlist[i]);
       }
       //
       System.out.println("Methods:");
       Method methodlist[] = classreflected.getMethods();
       for(int i = 0; i < methodlist.length; i++)
       {
           methodlist[i].setAccessible(true);
         System.out.println("\t Method Name: " + methodlist[i].getName()+
                 " ParameterCount "+ methodlist[i].getParameterCount()+
                 " returnType "+ methodlist[i].getReturnType());
       }
    } 
  public static void lateBinding() {
		java.util.Scanner sc = new Scanner(System.in);
		try {			
			System.out.println("Enter Class Name");
			String className = sc.nextLine();
			// load the class -- A a1;
			Class<?> classRef = Class.forName(className);
			 //create Object a1=new A();
			Object obj = classRef.getDeclaredConstructor().newInstance();			
			System.out.println("Class Name " + obj.getClass().getName());
			System.out.println("Hash Code " + obj.hashCode());
		} 
catch (Exception e) {
			System.out.println("Exception: " + e);
		}
		finally
		{
			sc.close();
		}
	}
  public static void testA()
  {
  	  String s1="Hello";
  	  printClassInfo(s1);
  	  Integer x=200;
  	  printClassInfo(x);
  	  Emp firstEmp=new Emp();
  	  printClassInfo(firstEmp);
  	  Actor hero=new Actor();
  	  printClassInfo(hero);
  			  
  }
  public static void testB (){

      String classname = "com.chainsys.reflection.Actor";
          Class<?> actorclass= null;
      try {
                  actorclass Class.forName (classname); // Actor actorclass=null;
           } catch (ClassNotFoundException el) { el.printStackTrace ();
return;
}
           Object obj = null;
      try {
      // obj=ctorclass.newInstance(); // new Actor (); obj actorclass.get DeclaredConstructors () [0].newInstance(); =
          } catch (IllegalArgumentException e) {
        	e.printStackTrace();
           return;
          } catch (InvocationTargetException e) { 
        	  e.printStackTrace ();
           return;
      }
    }
	
  }
  
  
